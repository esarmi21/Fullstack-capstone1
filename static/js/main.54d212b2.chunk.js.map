{"version":3,"sources":["components/Header/Header.js","components/Video/Video.js","components/Chatbox/MessagesList/MessageList.js","components/Chatbox/Title/Title.js","components/Chatbox/SubmitMessage/SubmitMessage.js","components/Chatbox/Chatbox.js","config.js","services/AuthApiService.js","components/Login/Login.js","components/Register/Register.js","services/AuthTokenService.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Video","YouTube","videoId","opts","height","width","playerVars","autoplay","event","target","pauseVideo","MessageList","this","props","messages","map","message","id","key","SumbitMessage","state","handleChange","bind","handleSubmit","e","setState","value","preventDefault","sendMessage","onSubmit","onChange","placeholder","type","Chatbox","isLoggedIn","AuthApiService","postLogin","credentials","fetch","config","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","postUser","user","postComment","username","text","getComments","LoginForm","error","ev","usernameField","passwordField","password","onLoginSuccess","console","log","catch","name","required","defaultProps","RegistrationForm","onRegistrationSuccess","AuthTokenService","login","localStorage","setItem","logout","checkLogIn","getItem","getUsername","App","logOut","onClick","data","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54d212b2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Header.css'\r\n\r\n\r\nexport default class Header extends Component {\r\n \r\n    render() {\r\n      return <>\r\n        <nav className='Header'>\r\n          <h1>\r\n              {' '}\r\n              Crossing Vibes\r\n          </h1>\r\n        </nav>\r\n      </>\r\n    }\r\n  }","import React, { Component } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport './Video.css'\r\n\r\n\r\nexport default class Video extends Component{\r\n    render() {\r\n        const opts = {\r\n          height: '400',\r\n          width: '600',\r\n          playerVars: { // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1\r\n          }\r\n        };\r\n    \r\n        return (\r\n          <div className='video'>\r\n          <YouTube\r\n            videoId=\"6BZuG0erHBY\"\r\n            opts={opts}\r\n          />\r\n          </div>\r\n        );\r\n      }\r\n    \r\n      _onReady(event) {\r\n        event.target.pauseVideo();\r\n      }\r\n    }","import React, { Component } from 'react'\r\nimport './MessageList.css'\r\n\r\nexport default class MessageList extends Component {\r\n\r\n    render() {\r\n      return (\r\n        <ul className=\"message-list\">                 \r\n          {this.props.messages.map((message,id) => {\r\n            return (\r\n             <li key={id}>\r\n               <div>\r\n                 \r\n                 {message}\r\n               </div>\r\n             </li>\r\n           )\r\n         })}\r\n       </ul>\r\n      )\r\n    }\r\n  }","import React, { Component } from 'react'\r\nimport './Title.css'\r\n\r\n\r\nexport default class MessageList extends Component{\r\n    render(){\r\n        return (\r\n            <div className ='title'>\r\n              LOGIN TO CHAT\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './SubmitMessage.css'\r\n\r\n\r\nexport default class SumbitMessage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            message: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n    \r\n    handleChange(e) {\r\n        this.setState({\r\n            message: e.target.value\r\n        })\r\n    }\r\n    \r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n            this.props.sendMessage(this.state.message)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <form\r\n                onSubmit={this.handleSubmit}\r\n                className=\"send-message-form\">\r\n                <input\r\n                    onChange={this.handleChange}\r\n                    value={this.state.message}\r\n                    placeholder=\"Type your message and hit ENTER\"\r\n                    type=\"text\" />\r\n            </form>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport MessageList from './MessagesList/MessageList'\r\nimport Title from './Title/Title'\r\nimport './Chatbox.css'\r\nimport SumbitMessage from './SubmitMessage/SubmitMessage'\r\n\r\n\r\n\r\nclass Chatbox extends Component {\r\n      \r\n\r\n    render() {\r\n      return (\r\n        <div className=\"app\">\r\n            <Title/>\r\n          <MessageList messages={this.props.messages}/>\r\n         {this.props.isLoggedIn &&\r\n          <SumbitMessage sendMessage = {this.props.sendMessage}/> \r\n         }\r\n       </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default Chatbox","export default {\r\n    API_ENDPOINT: 'http://localhost:8000'\r\n  }\r\n  ","import config from '../config'\r\n\r\nconst AuthApiService = {\r\n\r\n  postLogin(credentials) {\r\n    return fetch(`${config.API_ENDPOINT}/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n  },\r\n  postUser(user) {\r\n     return fetch(`${config.API_ENDPOINT}/users`, {\r\n       method: 'POST',\r\n       headers: {\r\n         'content-type': 'application/json',\r\n       },\r\n       body: JSON.stringify(user),\r\n     })\r\n       .then(res =>\r\n         (!res.ok)\r\n           ? res.json().then(e => Promise.reject(e))\r\n           : res.json()\r\n       )\r\n   },\r\n   postComment(username, text) {\r\n    return fetch(`${config.API_ENDPOINT}/comments`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        username,\r\n        text,\r\n      }),\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n  },\r\n  getComments(){\r\n    return fetch(`${config.API_ENDPOINT}/comments`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n    })\r\n      .then(res =>\r\n        (!res.ok)\r\n          ? res.json().then(e => Promise.reject(e))\r\n          : res.json()\r\n      )\r\n  }\r\n}\r\n\r\nexport default AuthApiService","import React, { Component } from 'react'\r\nimport AuthApiService from '../../services/AuthApiService'\r\nimport './Login.css'\r\n\r\nexport default class LoginForm extends Component {\r\n  static defaultProps = {\r\n    onLoginSuccess: () => {}\r\n  }\r\n  \r\n\r\n  state = { error: null }\r\n\r\n  handleSubmit= ev => {\r\n    ev.preventDefault()\r\n    this.setState({ error: null })\r\n    const { usernameField, passwordField } = ev.target\r\n    \r\n    AuthApiService.postLogin({\r\n      username: usernameField.value,\r\n      password: passwordField.value,\r\n    })\r\n      .then(res => {\r\n        this.props.onLoginSuccess(usernameField.value)\r\n        console.log('success login')\r\n        usernameField.value = ''\r\n        passwordField.value = ''\r\n      })\r\n      .catch(res => {\r\n        console.log(res.error)\r\n        this.setState({ error: res.error })\r\n      })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className= 'login'>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"username\"\r\n            name=\"usernameField\"\r\n            placeholder=\"username\"\r\n            // value={this.state.username}\r\n            // onChange={this.handleChange}\r\n            required\r\n          />\r\n\r\n          <input\r\n            type=\"password\"\r\n            name=\"passwordField\"\r\n            placeholder=\"password\"\r\n            // value={this.state.password}\r\n            // onChange={this.handleChange}\r\n            required\r\n          />\r\n\r\n          <button className = \"submit\" type=\"submit\">Login</button>\r\n        \r\n        </form>\r\n\r\n    \r\n        {/* {this.props.isLoggedIn && <button className = \"submit\" onClick= {this.props.logOut}>Logout</button>} */}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport AuthApiService from '../../services/AuthApiService'\r\nimport './Register.css'\r\n\r\nexport default class RegistrationForm extends Component {\r\n  static defaultProps = {\r\n    onRegistrationSuccess: () => {}\r\n  }\r\n\r\n  state = { error: null, username:'',password:'' }\r\n\r\n  handleSubmit = ev => {\r\n    ev.preventDefault()\r\n    const { username, password } = ev.target\r\n\r\n    console.log({ username, password })\r\n    console.log(username.value, password.value)\r\n    this.setState({ error: null })\r\n     AuthApiService.postUser({\r\n       username: username.value,\r\n       password: password.value,\r\n     })\r\n       this.setState({username:'', password:''})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className= 'register'>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            name=\"username\"\r\n            placeholder=\"username\"\r\n            value={this.state.username}\r\n            onChange={(event)=>{\r\n              this.setState({username:event.value})\r\n            }}\r\n            required\r\n          />\r\n\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"password\"\r\n            value={this.state.password}\r\n            onChange={(event)=>{\r\n              this.setState({password:event.value})\r\n            }}\r\n            required\r\n          />\r\n\r\n          <button className = \"submit\" type=\"submit\">Register</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}","\r\n\r\nconst AuthTokenService = {\r\n\r\n    login(username){\r\n        localStorage.setItem('loggedIn', username)\r\n    },\r\n    logout(){\r\n        localStorage.setItem('loggedIn', '')\r\n\r\n    },\r\n\r\n    checkLogIn(){\r\n        const username = localStorage.getItem('loggedIn')\r\n        if(username)//not null\r\n            return true\r\n        else \r\n             return false\r\n    },\r\n\r\n    getUsername(){\r\n        return localStorage.getItem('loggedIn')     \r\n    }\r\n}\r\n\r\nexport default AuthTokenService;","import React, { Component } from 'react';\nimport Header from './Header/Header'\nimport Video from './Video/Video'\nimport Chatbox from './Chatbox/Chatbox';\nimport Login from './Login/Login'\nimport Register  from './Register/Register'\nimport '../App.css'\nimport AuthTokenService from '../services/AuthTokenService'\nimport AuthApiService from '../services/AuthApiService'\n\nclass App extends Component {\n\n  state = {\n    isLoggedIn: AuthTokenService.checkLogIn(),\n    messages: []\n  }\ncomponentDidMount(){\n  AuthApiService.getComments()\n  .then((messages)=>{\n    this.setState({\n      messages:messages.map((message)=>message.text)\n    })\n  })\n}\n  render() {\n    return (\n      <div className='App'>\n        <header className='App__header'>\n     {!this.state.isLoggedIn && (\n       <Login isLoggedIn = {this.state.isLoggedIn} logOut = {()=>{\n        AuthTokenService.logout();\n        this.setState({isLoggedIn:false})\n      }} onLoginSuccess = {(username) =>{\n        AuthTokenService.login(username);\n        this.setState({isLoggedIn:true})\n      }}/>\n     )} \n\n     {this.state.isLoggedIn && ( \n     <button isLoggedIn = {this.state.isLoggedIn} \n     className = \"submit\" \n     onClick = {()=>{\n      AuthTokenService.logout();\n      this.setState({isLoggedIn:false})\n     }} >\n       Logout\n       </button>)}\n\n          {!this.state.isLoggedIn && <Register/> }\n  \n              <Header />\n          </header>\n          <Video/>\n        <Chatbox isLoggedIn = {this.state.isLoggedIn} messages={this.state.messages} sendMessage = {(message)=>\n        {\n          AuthApiService.postComment(AuthTokenService.getUsername(), message)\n          .then(data => {\n            console.log('randomthing' , message)\n              this.setState({messages:this.state.messages.concat(message)})\n          })\n          .catch(error => console.log(error));\n\n        }}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<BrowserRouter>\n     <App />\n</BrowserRouter>,\n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}